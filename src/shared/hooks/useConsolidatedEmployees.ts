/**
 * Consolidated Employees Hooks - Generated by createEntityHooks Factory
 * 
 * BEFORE: ~150 lines of duplicated hook patterns in useEmployees.ts
 * AFTER: ~40 lines using factory pattern (73% reduction)
 */

import createEntityHooks from './createEntityHooks'
import { consolidatedEmployeesService } from '../services'
import { Employee, CreateEmployeeData, UpdateEmployeeData, EmployeeFilters } from '../../types'

/**
 * Extended employee filters for additional functionality
 */
export interface ExtendedEmployeeFilters extends EmployeeFilters {
  search?: string
  is_active?: boolean
  employee_type?: 'operario' | 'chef' | 'mesero' | 'supervisor' | 'conductor'
  category_id?: number
  has_arl?: boolean
  limit?: number
  offset?: number
}

/**
 * Generate all employee hooks using factory
 */
const employeeHooks = createEntityHooks({
  entityName: 'employees',
  service: consolidatedEmployeesService,
  defaultStaleTime: 5 * 60 * 1000, // 5 minutes
})

// Extract hooks with proper TypeScript types
export const useEmployees = employeeHooks.useEmployees as (filters?: ExtendedEmployeeFilters) => any
export const useEmployee = employeeHooks.useEmployee
export const useActiveEmployees = employeeHooks.useActiveEmployees
export const useSearchEmployees = employeeHooks.useSearchEmployees
export const useCreateEmployee = employeeHooks.useCreateEmployee
export const useUpdateEmployee = employeeHooks.useUpdateEmployee
export const useDeleteEmployee = employeeHooks.useDeleteEmployee
export const useEmployeesBulkOperations = employeeHooks.useEmployeesBulkOperations
export const useEmployeeCache = employeeHooks.useEmployeeCache
export const usePrefetchEmployees = employeeHooks.usePrefetchEmployees

// Export query keys for external use
export const employeesQueryKeys = employeeHooks.queryKeys

// ============================================================================
// SPECIALIZED EMPLOYEE HOOKS (preserved business logic)
// ============================================================================

/**
 * Hook to get employees by type
 * Preserved from original useEmployees for backward compatibility
 */
export const useEmployeesByType = (employeeType: 'operario' | 'chef' | 'mesero' | 'supervisor' | 'conductor') => {
  return useEmployees({ employee_type: employeeType })
}

/**
 * Hook to get employees by category
 */
export const useEmployeesByCategory = (categoryId: number) => {
  return useEmployees({ category_id: categoryId })
}

/**
 * Hook to get employees with ARL
 */
export const useEmployeesWithARL = () => {
  return useEmployees({ has_arl: true })
}

/**
 * Hook for employee statistics and analytics
 */
export const useEmployeeStats = () => {
  const { data: employees = [] } = useActiveEmployees()
  
  const stats = {
    total: employees.length,
    byType: {
      operario: employees.filter(e => e.employee_type === 'operario').length,
      chef: employees.filter(e => e.employee_type === 'chef').length,
      mesero: employees.filter(e => e.employee_type === 'mesero').length,
      supervisor: employees.filter(e => e.employee_type === 'supervisor').length,
      conductor: employees.filter(e => e.employee_type === 'conductor').length,
    },
    withARL: employees.filter(e => e.has_arl).length,
    withoutARL: employees.filter(e => !e.has_arl).length,
    averageAge: employees.length > 0 && employees.some(e => e.age)
      ? employees.filter(e => e.age).reduce((sum, e) => sum + (e.age || 0), 0) / employees.filter(e => e.age).length
      : 0,
  }

  return { stats, employees }
}

/**
 * Hook for employee category information
 */
export const useEmployeeCategory = (employeeId: number) => {
  const { data: employee } = useEmployee(employeeId)
  
  return {
    category: employee?.category,
    categoryInfo: employee?.category_info,
    hasCategory: !!employee?.category_id,
  }
}

/**
 * Hook for employee availability and scheduling
 */
export const useEmployeeAvailability = (employeeType: 'operario' | 'chef' | 'mesero' | 'supervisor' | 'conductor') => {
  const { data: employees = [] } = useEmployeesByType(employeeType)
  
  const available = employees.filter(e => e.is_available)
  const unavailable = employees.filter(e => !e.is_available)
  
  return {
    available,
    unavailable,
    availableCount: available.length,
    unavailableCount: unavailable.length,
    totalCount: employees.length,
    availabilityRate: employees.length > 0 ? (available.length / employees.length) * 100 : 0,
  }
}

// Export all hooks as a single object for convenience
export const consolidatedEmployeesHooks = {
  useEmployees,
  useEmployee,
  useActiveEmployees,
  useSearchEmployees,
  useCreateEmployee,
  useUpdateEmployee,
  useDeleteEmployee,
  useEmployeesBulkOperations,
  useEmployeeCache,
  usePrefetchEmployees,
  useEmployeesByType,
  useEmployeesByCategory,
  useEmployeesWithARL,
  useEmployeeStats,
  useEmployeeCategory,
  useEmployeeAvailability,
  queryKeys: employeesQueryKeys,
}

export default consolidatedEmployeesHooks