/**
 * Consolidated Clients Hooks - Generated by createEntityHooks Factory
 * 
 * BEFORE: ~120 lines of duplicated hook patterns in useClients.ts
 * AFTER: ~30 lines using factory pattern (75% reduction)
 */

import createEntityHooks from './createEntityHooks'
import { consolidatedClientsService } from '../services'
import { Client, CreateClientData, UpdateClientData, ClientFilters } from '../../types'

/**
 * Extended client filters for additional functionality
 */
export interface ExtendedClientFilters extends ClientFilters {
  search?: string
  is_active?: boolean
  type?: 'social' | 'corporativo'
  limit?: number
  offset?: number
}

/**
 * Generate all client hooks using factory
 */
const clientHooks = createEntityHooks({
  entityName: 'clients',
  service: consolidatedClientsService,
  defaultStaleTime: 5 * 60 * 1000, // 5 minutes
})

// Extract hooks with proper TypeScript types
export const useClients = clientHooks.useClients as (filters?: ExtendedClientFilters) => any
export const useClient = clientHooks.useClient
export const useActiveClients = clientHooks.useActiveClients
export const useSearchClients = clientHooks.useSearchClients
export const useCreateClient = clientHooks.useCreateClient
export const useUpdateClient = clientHooks.useUpdateClient  
export const useDeleteClient = clientHooks.useDeleteClient
export const useClientsBulkOperations = clientHooks.useClientsBulkOperations
export const useClientCache = clientHooks.useClientCache
export const usePrefetchClients = clientHooks.usePrefetchClients

// Export query keys for external use
export const clientsQueryKeys = clientHooks.queryKeys

// ============================================================================
// SPECIALIZED CLIENT HOOKS (preserved business logic)
// ============================================================================

/**
 * Hook to get clients by type
 * Preserved from original useClients for backward compatibility
 */
export const useClientsByType = (type: 'social' | 'corporativo') => {
  return useClients({ type })
}

/**
 * Hook for client statistics and analytics
 */
export const useClientStats = () => {
  const { data: clients = [] } = useActiveClients()
  
  const stats = {
    total: clients.length,
    socialClients: clients.filter(c => c.type === 'social').length,
    corporateClients: clients.filter(c => c.type === 'corporativo').length,
    withAdvancePayment: clients.filter(c => c.requires_advance_payment).length,
    averagePaymentTerms: clients.length > 0 
      ? clients.reduce((sum, c) => sum + c.payment_terms_days, 0) / clients.length 
      : 0,
  }

  return { stats, clients }
}

/**
 * Hook for client contact management
 */
export const useClientContacts = (clientId: number) => {
  const { data: client } = useClient(clientId)
  
  return {
    contacts: client?.contacts || [],
    primaryContact: client?.contacts?.find(c => c.is_primary),
    contactCount: client?.contacts?.length || 0,
  }
}

// Export all hooks as a single object for convenience
export const consolidatedClientsHooks = {
  useClients,
  useClient,
  useActiveClients,
  useSearchClients,
  useCreateClient,
  useUpdateClient,
  useDeleteClient,
  useClientsBulkOperations,
  useClientCache,
  usePrefetchClients,
  useClientsByType,
  useClientStats,
  useClientContacts,
  queryKeys: clientsQueryKeys,
}

export default consolidatedClientsHooks