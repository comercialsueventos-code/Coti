/**
 * Consolidated Machinery Hooks - Generated by createEntityHooks Factory
 * 
 * BEFORE: ~200+ lines of duplicated hook patterns in useMachinery.ts
 * AFTER: ~70 lines using factory pattern (65% reduction)
 */

import createEntityHooks from './createEntityHooks'
import { consolidatedMachineryService, ConsolidatedMachineryService } from '../services'
import { Machinery, CreateMachineryData, UpdateMachineryData, MachineryFilters } from '../../types'

/**
 * Extended machinery filters for additional functionality
 */
export interface ExtendedMachineryFilters extends MachineryFilters {
  search?: string
  is_active?: boolean
  is_available?: boolean
  category?: 'sonido' | 'iluminacion' | 'cocina' | 'refrigeracion' | 'mobiliario' | 'decoracion' | 'transporte' | 'otros'
  requires_operator?: boolean
  max_hourly_rate?: number
  max_daily_rate?: number
  limit?: number
  offset?: number
}

/**
 * Generate all machinery hooks using factory
 */
const machineryHooks = createEntityHooks({
  entityName: 'machinery',
  service: consolidatedMachineryService,
  defaultStaleTime: 5 * 60 * 1000, // 5 minutes
})

// Extract hooks with proper TypeScript types  
export const useMachinery = machineryHooks.useMachinery as (filters?: ExtendedMachineryFilters) => any
export const useMachiner = machineryHooks.useMachiner // Note: singular form
export const useActiveMachinery = machineryHooks.useActiveMachinery
export const useSearchMachinery = machineryHooks.useSearchMachinery
export const useCreateMachiner = machineryHooks.useCreateMachiner
export const useUpdateMachiner = machineryHooks.useUpdateMachiner
export const useDeleteMachiner = machineryHooks.useDeleteMachiner
export const useMachineryBulkOperations = machineryHooks.useMachineryBulkOperations
export const useMachinerCache = machineryHooks.useMachinerCache
export const usePrefetchMachinery = machineryHooks.usePrefetchMachinery

// Better naming aliases
export const useMachineryItem = useMachiner
export const useCreateMachinery = useCreateMachiner
export const useUpdateMachinery = useUpdateMachiner  
export const useDeleteMachinery = useDeleteMachiner
export const useMachineryCache = useMachinerCache

// Export query keys for external use
export const machineryQueryKeys = machineryHooks.queryKeys

// ============================================================================
// SPECIALIZED MACHINERY HOOKS (preserved business logic)
// ============================================================================

/**
 * Hook to get machinery by category
 */
export const useMachineryByCategory = (category: string) => {
  return useMachinery({ category: category as any })
}

/**
 * Hook to get available machinery for specific date/time
 */
export const useAvailableMachinery = (date: string, hours: number, category?: string) => {
  const { data: machinery = [], ...rest } = useMachinery({ 
    is_available: true, 
    is_active: true,
    category: category as any,
  })
  
  // Sort by hourly rate (cheapest first)
  const sorted = machinery.sort((a, b) => a.hourly_rate - b.hourly_rate)
  
  return { data: sorted, ...rest }
}

/**
 * Hook to get machinery needing maintenance
 */
export const useMachineryNeedingMaintenance = () => {
  const { data: allMachinery = [], ...rest } = useActiveMachinery()
  
  const today = new Date()
  const needingMaintenance = allMachinery.filter(machine => {
    if (!machine.next_maintenance_date) return false
    return new Date(machine.next_maintenance_date) <= today
  })
  
  const sorted = needingMaintenance.sort((a, b) => 
    new Date(a.next_maintenance_date || '').getTime() - new Date(b.next_maintenance_date || '').getTime()
  )
  
  return { data: sorted, ...rest }
}

/**
 * Hook for machinery cost calculations
 */
export const useMachineryCostCalculation = () => {
  return {
    calculateMachineryCost: ConsolidatedMachineryService.calculateMachineryCost,
  }
}

/**
 * Hook for machinery availability checking
 */
export const useMachineryAvailabilityCheck = () => {
  return {
    checkAvailability: async (machineryId: number, date: string, hours: number) => {
      return consolidatedMachineryService.checkAvailability(machineryId, date, hours)
    },
  }
}

/**
 * Hook for machinery statistics
 */
export const useMachineryStats = () => {
  const { data: machinery = [] } = useMachinery()
  
  return {
    stats: consolidatedMachineryService.getStatistics(),
    machinery,
  }
}

/**
 * Hook for machinery validation
 */
export const useMachineryValidation = () => {
  return {
    validateMachineryData: ConsolidatedMachineryService.validateMachineryData,
  }
}

/**
 * Hook for machinery utilities
 */
export const useMachineryUtils = () => {
  return {
    getCategoryIcon: ConsolidatedMachineryService.getCategoryIcon,
    getCategoryDisplayName: ConsolidatedMachineryService.getCategoryDisplayName,
    formatCurrency: ConsolidatedMachineryService.formatCurrency,
    getMaintenanceStatusColor: ConsolidatedMachineryService.getMaintenanceStatusColor,
    getMaintenanceStatusMessage: ConsolidatedMachineryService.getMaintenanceStatusMessage,
    generateMachineryReport: ConsolidatedMachineryService.generateMachineryReport,
  }
}

// Export all hooks as a single object for convenience
export const consolidatedMachineryHooks = {
  useMachinery,
  useMachineryItem,
  useActiveMachinery,
  useSearchMachinery,
  useCreateMachinery,
  useUpdateMachinery,
  useDeleteMachinery,
  useMachineryBulkOperations,
  useMachineryCache,
  usePrefetchMachinery,
  useMachineryByCategory,
  useAvailableMachinery,
  useMachineryNeedingMaintenance,
  useMachineryCostCalculation,
  useMachineryAvailabilityCheck,
  useMachineryStats,
  useMachineryValidation,
  useMachineryUtils,
  queryKeys: machineryQueryKeys,
}

export default consolidatedMachineryHooks