/**
 * Consolidated Suppliers Hooks - Generated by createEntityHooks Factory
 * 
 * BEFORE: ~180 lines of duplicated hook patterns in useSuppliers.ts
 * AFTER: ~60 lines using factory pattern (67% reduction)
 */

import createEntityHooks from './createEntityHooks'
import { consolidatedSuppliersService, ConsolidatedSuppliersService } from '../services'
import { Supplier, CreateSupplierData, UpdateSupplierData, SupplierFilters } from '../../types'

/**
 * Extended supplier filters for additional functionality
 */
export interface ExtendedSupplierFilters extends SupplierFilters {
  search?: string
  is_active?: boolean
  type?: 'machinery_rental' | 'event_subcontractor' | 'catering' | 'decoration' | 'entertainment' | 'transport' | 'otros'
  service_area?: string
  specialty?: string
  min_quality_rating?: number
  limit?: number
  offset?: number
}

/**
 * Generate all supplier hooks using factory
 */
const supplierHooks = createEntityHooks({
  entityName: 'suppliers',
  service: consolidatedSuppliersService,
  defaultStaleTime: 5 * 60 * 1000, // 5 minutes
})

// Extract hooks with proper TypeScript types
export const useSuppliers = supplierHooks.useSuppliers as (filters?: ExtendedSupplierFilters) => any
export const useSupplier = supplierHooks.useSupplier
export const useActiveSuppliers = supplierHooks.useActiveSuppliers
export const useSearchSuppliers = supplierHooks.useSearchSuppliers
export const useCreateSupplier = supplierHooks.useCreateSupplier
export const useUpdateSupplier = supplierHooks.useUpdateSupplier
export const useDeleteSupplier = supplierHooks.useDeleteSupplier
export const useSuppliersBulkOperations = supplierHooks.useSuppliersBulkOperations
export const useSupplierCache = supplierHooks.useSupplierCache
export const usePrefetchSuppliers = supplierHooks.usePrefetchSuppliers

// Export query keys for external use
export const suppliersQueryKeys = supplierHooks.queryKeys

// ============================================================================
// SPECIALIZED SUPPLIER HOOKS (preserved business logic)
// ============================================================================

/**
 * Hook to get suppliers by type
 */
export const useSuppliersByType = (type: string) => {
  return useSuppliers({ type: type as any })
}

/**
 * Hook to get top-rated suppliers
 */
export const useTopRatedSuppliers = (limit: number = 10) => {
  const { data: suppliers = [], ...rest } = useActiveSuppliers()
  
  const topRated = suppliers
    .sort((a, b) => b.quality_rating - a.quality_rating)
    .slice(0, limit)
  
  return { data: topRated, ...rest }
}

/**
 * Hook to search suppliers by capability
 */
export const useSuppliersByCapability = (capability: string, serviceArea?: string) => {
  const { data: suppliers = [], ...rest } = useActiveSuppliers()
  
  // Client-side filtering for now - could be moved to service
  const filtered = suppliers.filter(supplier => {
    const hasCapability = 
      supplier.specialties?.includes(capability) ||
      supplier.equipment_categories?.includes(capability)
    
    const hasServiceArea = !serviceArea || supplier.service_areas?.includes(serviceArea)
    
    return hasCapability && hasServiceArea
  })
  
  const sorted = filtered.sort((a, b) => b.quality_rating - a.quality_rating)
  
  return { data: sorted, ...rest }
}

/**
 * Hook for supplier performance metrics
 */
export const useSupplierPerformance = (supplierId: number) => {
  const { data: supplier } = useSupplier(supplierId)
  
  const performanceMetrics = supplier ? {
    supplier_id: supplierId,
    supplier_name: supplier.name,
    reliability_score: supplier.reliability_rating,
    quality_score: supplier.quality_rating,
    price_competitiveness: supplier.price_rating,
    overall_rating: (supplier.quality_rating + supplier.reliability_rating + supplier.price_rating) / 3,
    last_collaboration: supplier.last_collaboration_date,
  } : null
  
  return { data: performanceMetrics, supplier }
}

/**
 * Hook for suitable suppliers based on requirements
 */
export const useSuitableSuppliers = (
  serviceType: string,
  specialty?: string,
  serviceArea?: string,
  minQualityRating: number = 3.0
) => {
  return useSuppliers({
    type: serviceType as any,
    specialty,
    service_area: serviceArea,
    min_quality_rating: minQualityRating,
  })
}

/**
 * Hook for supplier statistics
 */
export const useSupplierStats = () => {
  const { data: suppliers = [] } = useActiveSuppliers()
  
  return {
    stats: ConsolidatedSuppliersService.generateSupplierReport(suppliers),
    suppliers,
  }
}

/**
 * Hook for supplier validation
 */
export const useSupplierValidation = () => {
  return {
    validateSupplierData: ConsolidatedSuppliersService.validateSupplierData,
  }
}

/**
 * Hook for supplier utilities
 */
export const useSupplierUtils = () => {
  return {
    getTypeIcon: ConsolidatedSuppliersService.getTypeIcon,
    getTypeDisplayName: ConsolidatedSuppliersService.getTypeDisplayName,
    formatCurrency: ConsolidatedSuppliersService.formatCurrency,
    getRatingColor: ConsolidatedSuppliersService.getRatingColor,
    getRatingText: ConsolidatedSuppliersService.getRatingText,
    calculateCommissionValue: ConsolidatedSuppliersService.calculateCommissionValue,
    formatPaymentTerms: ConsolidatedSuppliersService.formatPaymentTerms,
  }
}

// Export all hooks as a single object for convenience
export const consolidatedSuppliersHooks = {
  useSuppliers,
  useSupplier,
  useActiveSuppliers,
  useSearchSuppliers,
  useCreateSupplier,
  useUpdateSupplier,
  useDeleteSupplier,
  useSuppliersBulkOperations,
  useSupplierCache,
  usePrefetchSuppliers,
  useSuppliersByType,
  useTopRatedSuppliers,
  useSuppliersByCapability,
  useSupplierPerformance,
  useSuitableSuppliers,
  useSupplierStats,
  useSupplierValidation,
  useSupplierUtils,
  queryKeys: suppliersQueryKeys,
}

export default consolidatedSuppliersHooks