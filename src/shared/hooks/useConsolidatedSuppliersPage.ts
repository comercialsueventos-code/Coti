/**
 * Consolidated Suppliers Page Hook - Generated by createEntityPage Factory
 * 
 * BEFORE: ~107 lines in useSuppliersPage.ts
 * AFTER: ~50 lines using factory pattern (53% reduction)
 */

import createEntityPage from './createEntityPage'
import {
  useSuppliers,
  useSuppliersStatistics,
  useTopRatedSuppliers,
  useDeleteSupplier
} from '../../hooks/useSuppliers'
import { Supplier } from '../../types'

/**
 * Custom search function for suppliers
 */
const suppliersSearch = (supplier: Supplier, searchTerm: string): boolean => {
  const searchableText = [
    supplier.name,
    supplier.contact_person,
    supplier.email,
    supplier.phone,
    (supplier as any).service_type,
    (supplier as any).notes
  ].filter(Boolean).join(' ').toLowerCase()
  
  return searchableText.includes(searchTerm.toLowerCase())
}

/**
 * Custom filter function for suppliers
 */
const suppliersFilter = (supplier: Supplier, filters: Record<string, any>): boolean => {
  // Type filter
  if (filters.selectedType && (supplier as any).service_type !== filters.selectedType) {
    return false
  }
  
  // Rating filter
  if (filters.minRating && ((supplier as any).rating || 0) < filters.minRating) {
    return false
  }
  
  // Status filter
  if (filters.status) {
    if (filters.status === 'active' && !supplier.is_active) return false
    if (filters.status === 'inactive' && supplier.is_active) return false
  }
  
  return true
}

/**
 * Create consolidated suppliers page hook using factory
 */
const useConsolidatedSuppliersPage = createEntityPage<Supplier>(
  {
    entityName: 'proveedor',
    tabConfig: {
      initialTab: 0,
      enableSearch: true,
      enableFiltering: true,
      tabLabels: ['Todos', 'Activos', 'Top Rated', 'Recientes']
    },
    dialogTypes: ['create', 'edit', 'rating', 'details'],
    customFilter: suppliersFilter,
    customSearch: suppliersSearch,
    deleteConfirmMessage: (supplier) => 
      `¿Estás seguro de que quieres eliminar el proveedor "${supplier.name}"? Esta acción no se puede deshacer.`
  },
  {
    useEntityData: useSuppliers,
    useStatistics: useSuppliersStatistics,
    useDeleteMutation: useDeleteSupplier,
    useTopRated: () => useTopRatedSuppliers(5)
  }
)

/**
 * Enhanced suppliers page hook with specific actions
 */
export const useSuppliersPage = () => {
  const suppliersPage = useConsolidatedSuppliersPage()
  
  // Enhanced actions specific to suppliers
  const enhancedActions = {
    ...suppliersPage.actions,
    
    // Specific supplier actions
    handleCreateSupplier: () => suppliersPage.actions.handleCreate(),
    handleEditSupplier: (supplier: Supplier) => suppliersPage.actions.handleEdit(supplier),
    handleDeleteSupplier: (id: number) => suppliersPage.actions.handleDelete(id),
    handleRateSupplier: (supplier: Supplier) => {
      suppliersPage.actions.openDialog('rating', supplier)
    },
    
    // Type and search management
    setSelectedType: (type: string) => suppliersPage.actions.setType(type),
    setSearchTerm: (term: string) => suppliersPage.tabPage.actions.setSearchTerm(term),
    
    // Dialog management with legacy names for compatibility
    setCreateDialogOpen: (open: boolean) => {
      if (open) suppliersPage.actions.openDialog('create')
      else suppliersPage.actions.closeDialog('create')
    },
    setEditDialogOpen: (open: boolean) => {
      if (open) suppliersPage.actions.openDialog('edit')  
      else suppliersPage.actions.closeDialog('edit')
    },
    setRatingDialogOpen: (open: boolean) => {
      if (open) suppliersPage.actions.openDialog('rating')
      else suppliersPage.actions.closeDialog('rating')
    },
    setSelectedSupplier: suppliersPage.actions.setSelectedEntity,
    setCurrentTab: suppliersPage.tabPage.actions.setCurrentTab
  }
  
  // Enhanced state with legacy structure for compatibility
  const enhancedState = {
    currentTab: suppliersPage.tabPage.state.currentTab,
    selectedType: suppliersPage.state.selectedType || '',
    searchTerm: suppliersPage.tabPage.state.searchTerm,
    createDialogOpen: suppliersPage.isDialogOpen('create'),
    editDialogOpen: suppliersPage.isDialogOpen('edit'),
    ratingDialogOpen: suppliersPage.isDialogOpen('rating'),
    selectedSupplier: suppliersPage.state.selectedEntity
  }
  
  // Enhanced data structure
  const enhancedData = {
    suppliers: suppliersPage.data.entities,
    statistics: suppliersPage.data.statistics,
    topRated: suppliersPage.data.toprated || [],
    filteredSuppliers: suppliersPage.data.searchResults.length > 0 
      ? suppliersPage.data.searchResults 
      : suppliersPage.data.filteredEntities
  }
  
  return {
    state: enhancedState,
    actions: enhancedActions,
    data: enhancedData,
    closeAllDialogs: suppliersPage.actions.closeAllDialogs,
    
    // Additional utilities
    tabPage: suppliersPage.tabPage,
    hasActiveFilters: suppliersPage.hasActiveFilters,
    getEntityById: suppliersPage.getEntityById
  }
}

export default useSuppliersPage