/**
 * Consolidated Hooks
 * 
 * Exports for all consolidated React hooks.
 * These hooks replace duplicated hook patterns across components.
 */

// Entity CRUD operations hook
export { useEntityCRUD } from './useEntityCRUD'
export type {
  EntityCRUDConfig,
  CRUDState,
  CRUDActions,
  EntityCRUDHook
} from './useEntityCRUD'

// Tab page management hook
export { useTabPage } from './useTabPage'
export type {
  TabPageConfig,
  TabPageState,
  TabPageActions,
  TabPageHook
} from './useTabPage'

// Generic Entity Query hooks
export {
  useEntityList,
  useEntityDetail,
  useEntitySearch,
  useEntityCount,
  useEntityCreate,
  useEntityUpdate,
  useEntityDelete,
  EntityQueryKeys
} from './useEntityQuery'

// Form state management hook
export { useFormState } from './useFormState'
export type {
  FormValidator,
  FormFieldHandler,
  FormSubmitHandler,
  UseFormStateConfig,
  FormState,
  FormActions,
  UseFormStateReturn
} from './useFormState'

// Async operations hook
export { useAsync, useAsyncImmediate, useMultipleAsync } from './useAsync'
export type {
  AsyncState,
  UseAsyncOptions,
  UseAsyncReturn
} from './useAsync'

// Toggle state hook
export { useToggle } from './useToggle'
export type {
  UseToggleOptions,
  UseToggleReturn
} from './useToggle'

// Debounce hooks
export { useDebounce, useDebouncedCallback, useDebouncedState } from './useDebounce'
export type { UseDebounceOptions } from './useDebounce'

// Storage hooks
export { useLocalStorage, useSessionStorage, useStorageState } from './useLocalStorage'
export type { UseLocalStorageOptions } from './useLocalStorage'

// Utility hooks
export {
  usePrevious,
  useModal,
  useCounter,
  useClipboard,
  useOnline,
  useWindowSize,
  useInterval
} from './useUtilities'

// ============================================================================
// ENTITY HOOKS FACTORY - Story 2.5: Hooks Standardization
// ============================================================================

// Core factory for creating entity hooks
export { default as createEntityHooks, createEntityQueryKeys } from './createEntityHooks'
export type { 
  BaseEntity, 
  EntityHooksConfig, 
  EntityHooks 
} from './createEntityHooks'

// ============================================================================
// CONSOLIDATED ENTITY HOOKS - Generated by Factory
// ============================================================================

// Clients hooks (replacing useClients.ts)
export * from './useConsolidatedClients'

// Employees hooks (replacing useEmployees.ts) 
export * from './useConsolidatedEmployees'

// Products hooks (replacing useProducts.ts)
export * from './useConsolidatedProducts'

// Suppliers hooks (replacing useSuppliers.ts)
export * from './useConsolidatedSuppliers'

// Machinery hooks (replacing useMachinery.ts)
export * from './useConsolidatedMachinery'

// Transport hooks (replacing useTransport.ts)
export * from './useConsolidatedTransport'

// Categories hooks (replacing useCategories.ts)
export * from './useConsolidatedCategories'

// Legacy entity-specific hooks (deprecated - use consolidated versions)
// Removed wildcard export to avoid conflicts - use consolidated versions instead

// ============================================================================
// FORM HOOKS FACTORY - Story 2.5: Hooks Standardization Sprint 4
// ============================================================================

// Core factory for creating entity form hooks
export { default as createEntityForm, FormDataTransformers, createEntityFormValidator } from './createEntityForm'
export type {
  EntityFormConfig,
  EntityFormMutations,
  EntityFormState,
  EntityFormActions,
  EntityFormHook
} from './createEntityForm'

// ============================================================================
// CONSOLIDATED FORM HOOKS - Generated by Form Factory
// ============================================================================

// Product form hooks
export { useProductForm, useQuickProductForm, useEditProductForm } from './useConsolidatedProductForm'

// Employee form hooks
export { useEmployeeForm, useQuickEmployeeForm, useEditEmployeeForm } from './useConsolidatedEmployeeForm'
export type { EmployeeFormData } from './useConsolidatedEmployeeForm'

// Category form hooks
export { useCategoryForm, useQuickCategoryForm, useEditCategoryForm } from './useConsolidatedCategoryForm'
export type { CategoryFormData } from './useConsolidatedCategoryForm'

// ============================================================================
// PAGE HOOKS FACTORY - Story 2.5: Hooks Standardization Sprint 4
// ============================================================================

// Core factory for creating entity page hooks
export { default as createEntityPage, defaultEntitySearch, defaultEntityFilter } from './createEntityPage'
export type {
  BasePageEntity,
  EntityPageConfig,
  EntityPageDataHooks,
  EntityPageState,
  EntityPageActions,
  EntityPageHook,
  EntityPageDialogType
} from './createEntityPage'

// ============================================================================
// CONSOLIDATED PAGE HOOKS - Generated by Page Factory
// ============================================================================

// Machinery page hooks
export { useMachineryPage } from './useConsolidatedMachineryPage'

// Suppliers page hooks
export { useSuppliersPage } from './useConsolidatedSuppliersPage'

// ============================================================================
// VALIDATION HOOKS - Story 2.6: Validation System Unification
// ============================================================================

// Consolidated validation hooks (replacing 8+ individual validation hooks)
export * from './useConsolidatedValidation'

// ============================================================================
// CONVENIENCE RE-EXPORTS FOR COMMON PATTERNS
// ============================================================================
export { useEntityList as useGenericList, useEntityDetail as useGenericDetail } from './useEntityQuery'
export { useToggle as useBooleanState } from './useToggle'
export { useAsync as useAsyncState } from './useAsync'