/**
 * Consolidated Transport Hooks - Generated by createEntityHooks Factory
 * 
 * BEFORE: ~120+ lines of duplicated hook patterns in useTransport.ts
 * AFTER: ~50 lines using factory pattern (58% reduction)
 */

import createEntityHooks from './createEntityHooks'
import { consolidatedTransportService, ConsolidatedTransportService } from '../services'
import { TransportZone, CreateTransportZoneData, UpdateTransportZoneData, TransportFilters } from '../../types'

/**
 * Extended transport filters for additional functionality
 */
export interface ExtendedTransportFilters extends TransportFilters {
  search?: string
  is_active?: boolean
  max_cost?: number
  max_travel_time?: number
  limit?: number
  offset?: number
}

/**
 * Generate all transport zone hooks using factory
 */
const transportHooks = createEntityHooks({
  entityName: 'transport_zones', // Note: using plural form to match table name
  service: consolidatedTransportService,
  defaultStaleTime: 5 * 60 * 1000, // 5 minutes
})

// Extract hooks with proper TypeScript types and better naming
export const useTransportZones = transportHooks.useTransport_zones as (filters?: ExtendedTransportFilters) => any
export const useTransportZone = transportHooks.useTransport_zone
export const useActiveTransportZones = transportHooks.useActiveTransport_zones
export const useSearchTransportZones = transportHooks.useSearchTransport_zones
export const useCreateTransportZone = transportHooks.useCreateTransport_zone
export const useUpdateTransportZone = transportHooks.useUpdateTransport_zone
export const useDeleteTransportZone = transportHooks.useDeleteTransport_zone
export const useTransportZonesBulkOperations = transportHooks.useTransport_zonesBulkOperations
export const useTransportZoneCache = transportHooks.useTransport_zoneCache
export const usePrefetchTransportZones = transportHooks.usePrefetchTransport_zones

// Better naming aliases
export const useTransport = useTransportZones
export const useActiveTransport = useActiveTransportZones

// Export query keys for external use
export const transportQueryKeys = transportHooks.queryKeys

// ============================================================================
// SPECIALIZED TRANSPORT HOOKS (preserved business logic)
// ============================================================================

/**
 * Hook to get zones ordered by distance (travel time)
 */
export const useTransportZonesByDistance = () => {
  const { data: zones = [], ...rest } = useActiveTransportZones()
  
  const sorted = zones.sort((a, b) => 
    (a.estimated_travel_time_minutes || 0) - (b.estimated_travel_time_minutes || 0)
  )
  
  return { data: sorted, ...rest }
}

/**
 * Hook to get zones ordered by cost
 */
export const useTransportZonesByCost = () => {
  const { data: zones = [], ...rest } = useActiveTransportZones()
  
  const sorted = zones.sort((a, b) => a.base_cost - b.base_cost)
  
  return { data: sorted, ...rest }
}

/**
 * Hook for transport cost calculation
 */
export const useTransportCostCalculation = () => {
  return {
    calculateCost: async (zoneId: number, requiresEquipment: boolean = false, equipmentCount: number = 1) => {
      return consolidatedTransportService.calculateCost(zoneId, requiresEquipment, equipmentCount)
    },
  }
}

/**
 * Hook to find optimal zone
 */
export const useOptimalTransportZone = (maxBudget?: number, maxTime?: number) => {
  const { data: zones = [] } = useActiveTransportZones()
  
  const optimalZone = ConsolidatedTransportService.findOptimalZone(zones, maxBudget, maxTime)
  
  return { optimalZone, zones }
}

/**
 * Hook for transport cost reporting
 */
export const useTransportCostReport = () => {
  const { data: zones = [] } = useActiveTransportZones()
  
  return {
    report: ConsolidatedTransportService.generateCostReport(zones),
    zones,
  }
}

/**
 * Hook for transport validation
 */
export const useTransportValidation = () => {
  return {
    validateZoneData: ConsolidatedTransportService.validateZoneData,
  }
}

/**
 * Hook for transport utilities
 */
export const useTransportUtils = () => {
  return {
    calculateDistanceBasedCost: ConsolidatedTransportService.calculateDistanceBasedCost,
    estimateTimeWithTraffic: ConsolidatedTransportService.estimateTimeWithTraffic,
    formatTravelTime: ConsolidatedTransportService.formatTravelTime,
    formatCurrency: ConsolidatedTransportService.formatCurrency,
  }
}

// Export all hooks as a single object for convenience
export const consolidatedTransportHooks = {
  useTransportZones,
  useTransportZone,
  useActiveTransportZones,
  useSearchTransportZones,
  useCreateTransportZone,
  useUpdateTransportZone,
  useDeleteTransportZone,
  useTransportZonesBulkOperations,
  useTransportZoneCache,
  usePrefetchTransportZones,
  useTransportZonesByDistance,
  useTransportZonesByCost,
  useTransportCostCalculation,
  useOptimalTransportZone,
  useTransportCostReport,
  useTransportValidation,
  useTransportUtils,
  // Aliases
  useTransport,
  useActiveTransport,
  queryKeys: transportQueryKeys,
}

export default consolidatedTransportHooks